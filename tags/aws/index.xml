<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on kelvinkoon.dev</title><link>https://kelvinkoon.github.io/tags/aws/</link><description>Recent content in aws on kelvinkoon.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvinkoon.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Efficient Pokémon Search Schemas</title><link>https://kelvinkoon.github.io/posts/exploring-efficient-pokemon-search-schemas/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/exploring-efficient-pokemon-search-schemas/</guid><description>Prologue Upon finishing the PS ingestion pipeline, next on the list was to implement a back-end as a means to serve the team data. Thus, this post discusses design considerations for the aforementioned PsTeamsService. You can try out the API here, complete with usage documentation.
Serverless Simplicity PS Teams Service high-level design. You can find a full-size image of the high-level design here.
After some discussion, I opted for AWS Lambda and API Gateway to handle requests to the DynamoDB storage.</description></item><item><title>State Machines, Pipelines, and Pokémon</title><link>https://kelvinkoon.github.io/posts/state-machines-pipelines-pokemon/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/state-machines-pipelines-pokemon/</guid><description>Prologue A year ago, I launched babiri&amp;rsquo;s open-source API. The project&amp;rsquo;s development halted shortly after as I acclimated to full-time work. The service proceeded to implode a few months after, left in radio silence until recently. With the advent of 2023, I&amp;rsquo;ve acquired the bandwidth to focus on developing a new suite of robust data tools. In particular, I&amp;rsquo;m happy to share what I&amp;rsquo;ve learned from industry to productionalize projects intersecting with my interests.</description></item><item><title>Building Babiri.net</title><link>https://kelvinkoon.github.io/posts/building-babiri-net/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/building-babiri-net/</guid><description>Editor&amp;rsquo;s Note As of 2023, babiri.net has been rebranded to Statsugiri. To find out more, read here.
Prologue After 2 months and 132 commits, babiri V2&amp;rsquo;s API has been launched! babiri is comprised of an API for aggregated usage stats gathered from Pokémon Showdown replays. I&amp;rsquo;m particularly excited to share how babiri came to be, why it exists, and the technology powering the project. This post is also inspired by Kevin&amp;rsquo;s zeal.</description></item></channel></rss>