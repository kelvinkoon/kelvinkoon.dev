<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backend on kelvinkoon.dev</title><link>https://kelvinkoon.github.io/tags/backend/</link><description>Recent content in backend on kelvinkoon.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvinkoon.github.io/tags/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Efficient Pok√©mon Search Schemas</title><link>https://kelvinkoon.github.io/posts/exploring-efficient-pokemon-search-schemas/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/exploring-efficient-pokemon-search-schemas/</guid><description>Prologue Upon finishing the PS ingestion pipeline, next on the list was to implement a back-end as a means to serve the team data. Thus, this post discusses design considerations for the aforementioned PsTeamsService. You can try out the API here, complete with usage documentation.
Serverless Simplicity PS Teams Service high-level design. You can find a full-size image of the high-level design here.
After some discussion, I opted for AWS Lambda and API Gateway to handle requests to the DynamoDB storage.</description></item></channel></rss>